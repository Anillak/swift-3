// курс: Увод в прогрмаирането със Swift
// Лекция 3: Условни оператори и цикли

// Условени оператори

/*
 if оператор

 В най-простата си форма оператора if има само едно условие.
 Той изпълнява зададените му изрази само, ако условието му е
 изпълнено (true).
*/

var temperature = -1
if temperature <= 0 {
    print("Много е студено. Облечете се топло.")
}

/*
 Какво е задължително и какво не при дефиницията на if оператор?
 
 Операторът if може да предостави алтернативен набор от условия (else),
 за ситуации, в които условието на if оператора е грешно (false).
 
 Можете да навържете няколко if оператора за да проверите допълнителни
 условия.
*/

/*
 switch оператор

 Switch операторът проверява стойността на променлива и я сравнява с
 различни възможни варианти, а след това изпълнява изразите,
 принадлежащи на първото съответствие.
 
 Всеки switch трябва да бъде изчерпателен. Ако това не е възможно,
 може да бъде дефиниран основен (default) case, за да могат да бъдат
 покрити всички останали стойности, които не са описани в отделен 
 case.
*/

let someNumber: Int = 3
switch someNumber {
case 1:
    print("Едно")
case 3:
    print("Три")
default:
    print("Някакво друго число")
}

// В един case можем да сравняваме повече от един случай.

// switch оператор: сравнение с последователности

let count = 34
let things = "ябълки"
var expression: String
switch count {
case 0:
    expression = "николко"
case 1..<10:
    expression = "няколко"
case 10..<100:
    expression = "десетки"
case 100..<1000:
    expression = "стотици"
default:
    expression = "много"
}
print("\(count) са \(expression) \(things)")

// switch оператор: сравнение на няколко стойности

let point = (0, 0)
switch point {
case (0, 0):
    print("точка (0, 0) е в началото на координатната система")
case (_, 0):
    print("точка (\(point.0), 0) се намира на абсциса х")
case (0, _):
    print("точка (0, \(point.1)) се намира на ордината у")
case (-2...2, -2...2):
    print("точка (\(point.0), \(point.1)) е в квадрата")
default:
    print("точка (\(point.0), \(point.1)) е извън квадрата")
}

/*
 Ами ако точката беше (0, 0)?
 
 Стойността или стойностите на case могат да бъдат присвоени
 във временна константа или променлива, която да се използва
 в тялото на случая (case).
*/


// Цикли

/*
 for-in цикъл

 Можете да използвате цикъла for-in за да обиколите елементи
 в масиви, символи в низ или диапазон от числа.
*/

for index in 1...5 {
    print("\(index) по 5 е \(index * 5)")
}

/*
 Ако не Ви е нужно да използвате стойносттна на променлива
 в цикъла, можете да игнорирате стойността й, чрез използването
 на долна черта на мястото на името на променливата.
*/

let base = 3
let power = 10
var answer = 1
for _ in 1...power {
    answer *= base
}
print("\(base) на степен \(power) е \(answer)")

/*
 Можете да използвате for-in за да обиколите елементите в масив.
*/

let names = ["Емил", "Спас", "Иван", "Гошо"]
for name in names {
    print("Здравей, \(name)!")
}

/*
 Също така можете да обикаляте масиви с ключ и стойност (dictionary)
 за да достъпите двойките ключ-стойност.
*/

let numberOfLegs = ["паяци": 8, "мравки": 6, "котки": 4]
for (animalName, legCount) in numberOfLegs {
    print("\(animalName)те имат \(legCount).")
}

/*
 Важно! Не е нужно елементите в dictionary да бъдат итерирани по 
 реда, в който са вкарани.
*/

// while цикъл

/*
 While цикълът изпълнява набор от изрази, докато условието му не
 стане false. 
 Swift предлага два вида while цикли:
 - while, който проверява условието в началото на всяка итерация
 - repeat-while, който проверява условието в края на всяка итерация
 */

/*
 “Змии и стълби”.
 
 Правилата са следните:
 Игровата дъска съдържа 25 квадрата и целта на играта е да се 
 достигне или премине 25-тият квадрат;
 Всеки ход играчът хвърля зар и премества своята пионка според
 числото, което е хвърлил. Посоката на преместване се определя по
 поредността на номерата изписани на дъската;
 Ако ходът Ви завърши в началото на стълба, трябва да се качите по нея;
 Ако ходът Ви завърши на главата на змия, трябва да слезете до опашката 
 й.
*/

let finalSquare = 25
var board = [Int](repeating: 0, count: finalSquare + 1)

board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08

var square = 0
var diceRoll = 0
while square < finalSquare {
    // хвърляне на зар
    diceRoll += 1
    if diceRoll == 7 { diceRoll = 1 }
    // преместване спрямо стойността на зара
    square += diceRoll
    if square < board.count {
        /*
         ако пионката на играча все още е върху дъската,
         преместваме пионката нагоре или надолу за змия или стълба
        */
        square += board[square]
    }
}
print("Край на играта!")

// repeat-while цикъл

/*
 Другият вариант на цикъла while (или цикъл repeat-while) изпълнява
 първоначална итерация на цикъла преди да провери условието.
*/

// Ще използваме променливите дефинирани в предния пример.
// За целта ще занулим на променливите
square = 0
diceRoll = 0

repeat {
    // преместване спрямо стойността на зара
    square += board[square]
    // хвърляне на зара
    diceRoll += 1
    if diceRoll == 7 { diceRoll = 1 }
    // преместване спрямо стойността на зара
    square += diceRoll
} while square < finalSquare
print("Край на играта!")
